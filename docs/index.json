[{"content":"Hello world!\nI graduated from the University of Otago last December where I studied Computer Science and Entrepreneurship, and now I\u0026rsquo;m working as a Software Engineer at a fintech / regtech scaleup (a startup in growth phase).\nIt\u0026rsquo;s been 6 months and I\u0026rsquo;ve learnt so much, so I figured it was about time I started a blog to document all my learnings!\nExcept rather than a blog, I\u0026rsquo;d like to think of this as my digital garden where I #learninpublic 📝\nI plan to populate my garden with plants on:\nThe stack I\u0026rsquo;m using: JavaScript, TypeScript, React, styled-components, GraphQL Misc stuff eg how to use DevTools, the DOM, writing tests, my fav tech people Projects I build My journey as a Software Engineer Note that there is no set planting schedule, and the plants may be re-tended to.\nI hope you enjoy visiting my garden 🌷\nAnd I look forward to being invited to yours one day 😛\nNotes\nAbout digital gardens How to set up your own digital garden Maggie Appleton\u0026#39;s digital garden Tom Critchlow\u0026#39;s digital garden Joel Hook\u0026#39;s digital garden ","permalink":"https://magdelinehuang.com/posts/001-my-digital-garden/","summary":"A bit about me and my garden","title":"🌷 My Digital Garden"},{"content":"This year, I set a few goals for myself, one of which was learning 3D.\nAs I mentioned in my previous post, I\u0026rsquo;ve never worked with 3D before but always thought it was cool to be able to build something 3D and even have it printed. Sprinkling 3D elements into a website would also be interesting.\nFor my software, I decided to use Spline . Spline is a web-based 3D design tool where you can build, animate, and publish interactive 3D experiences. I chose it because:\nIt\u0026rsquo;s fun, fast, and very beginner-friendly The UI feels familiar - kinda like Figma but for 3D I didn\u0026rsquo;t need to download anything because it runs in-browser Overall, it ticked a lot of my boxes as a tool to dip my toes into 3D.\nHere are the 3D projects I worked on and details of my process, including the struggles I faced.\nView this post on Instagram View this post on Instagram View this post on Instagram I also got to try 3D printing!\nView this post on Instagram Overall, this venture into the world of 3D was incredibly insightful.\nThere was a lot of clicking and mouse-moving needed for creating the 3D models, something I now appreciate does not exist in the world of coding haha 🤣 Designing in 3D is also kinda hard with the added dimension. The model might look alright from one angle, but when you look at the model from a different perspective, you might see it\u0026rsquo;s actually not all that alright haha.\n3D printing was also really fun! I\u0026rsquo;m inspired to start using my library\u0026rsquo;s 3D printing machine and print out some aesthetic and practical items!\n","permalink":"https://magdelinehuang.com/posts/014-3d/","summary":"3D modelling and 3D printing are so fun!","title":"🍡 Exploring the World of 3D"},{"content":"As a software engineer who spends my 9 - 5 coding SaaS products, this year I want to create a ✨ creative portfolio ✨\nIf something sparks my curiosity, I will pursue it as a project. Here are some areas I want to explore:\n3D modelling on Spline Data storytelling / data visualisation Coding a cozy game AI Animation Some other goals are to sharpen my React, JavaScript, and CSS skills and read “The Coding Career Handbook” by Shawn Swyx Wang .\nNot all these areas involve code, and that\u0026rsquo;s the beauty of it.\nMy motto is to explore whatever catches your curiosity. If it’s not for you, move on. But if it is, you might have just uncovered a new opportunity!\nAnd most importantly, have fun! 😀\nWhat are your goals for 2025? Share them below!\nPS This was originally an Instagram post on @magdelinehuang but it makes for a good 2025 opener blog post too! And yes, I\u0026rsquo;m trying to create more content this year!\nView this post on Instagram ","permalink":"https://magdelinehuang.com/posts/013-tech-goals-for-2025/","summary":"In my ✨ creative ✨ era","title":"🏆 My Tech Goals for 2025"},{"content":"On the 26th of July 2024, I attended my first ever international tech conference - CityJS . Like many other participants, I had travelled to Singapore just for this conference. As a software engineer that works primarily on the frontend, attending a JS conference was very exciting stuff for me!\nI had three goals for myself for this conference - learn 🧠, meet 🙋🏻‍♀️, and document 📸\n🧠 Learn Despite the conference having JavaScript in its name, the talks ranged from all things frontend to even AI. Very diverse, much like the melting pot Singapore is hehe 🇸🇬\nOut of all the talks, these stood out to me the most:\nAI in the browser and on the edge by Thor 雷神 Schaeff (speaker notes) Thor demoed how a combination of AI browser tools were able to instantaneously translate what he was saying in English to other languages. What’s more impressive is when he started speaking in Chinese and the translation having a pretty high accuracy!\nThe anatomy of a thinking machine by Nicole Zhu and Gabrielle Ong ( jan.ai )\nNicole and Gabrielle introduced the concept of local AI which is when the AI model is self-run on the user’s computer. This is in contrast to cloud-based AI like ChatGPT where the model is run on remote servers owned by OpenAI. There are several benefits of local AI, most notably data privacy, reduced network latency, and offline capability.\nView Transition API: Navigate in Elegance by Trung Vo (speaker notes) Trung’s very engaging and visual talk was about how we can bring PowerPoint Morph’s fluid storytelling to web navigation using View Transition. The View Transition API provides a mechanism for easily creating animated transitions between different website views. Between smiley emojis and cat emojis, it was definitely a laugh!\nThe web can be weird by Elian Van Cutsem (speaker) This talk was by far the most memorable 🤩 Elian reminded us that the web is weird and we can make it weird! He showed us all the fun little creations he made with the Battery Status API and WebMIDI. It was a good reminder that amidst all the serious work we may be doing with technology, at the end of the day, it’s good to step back and actually have some fun with what we’re doing.\nThe reality of learning at conferences\u0026hellip; Now to be frank with you, it was a struggle for me to concentrate 100% throughout the conference for various reasons - sometimes I was hungry, unable to understand the concepts, tired etc. And tbh, I think this is a common problem that most people face, because after all, we’re human 🥲 In the past, I would have thought, “Mannn, what a waste!” and felt bad for not giving it my all. But now I have a different perspective - I treat conferences as an opportunity for me to get exposure to a variety of different concepts. For example, if I hadn’t attended this conference, I wouldn’t have learnt about local AI, AI in the browser, and the view transition API. I may not have understood all of what was explained in the talks, but at least now I know that these concepts exist and should I want to learn more about them, I can. Essentially, a seed has been planted.\n🙋🏻‍♀️ Meet Now as an introvert, I had to put on my extrovert self to talk and network with people, and I’m glad to say I met quite a few people! Exploring the different booths (and gathering merch at the same time 🤭) was pretty interesting as I got the chance to hear what all these different companies are up to with their technology.\nProbably the highlight was meeting Evan You - the creator of Vue.js and Vite ! During his talk, he mentioned how his users’ frustrations were the fuel for his work. Super inspiring ✨\n📸 Document Yups being the GenZ that I am, I took lots of pics, made a reel, and also a YouTube video 😀 Enjoy!\nSo yes, that sums up my first ever international tech conference experience! Thank you so much to all the organisers and speakers for making this conference happen, and thanks to my workplace for sponsoring my ticket! 🥰\n","permalink":"https://magdelinehuang.com/posts/012-city-js-2024/","summary":"Attending my first ever international tech conference in Singapore!","title":"🇸🇬 City JS 2024 "},{"content":" What is a loading skeleton screen? A loading skeleton screen is essentially a low-fidelity version of the final page UI. The skeleton blocks are usually animated and display the UI gradually as opposed to all at once upon complete load like loading spinners.\nThere are several advantages of using a skeleton loading screen:\nClear indication of progress\nBecause the UI gradually loads over time, there is a clear indication of the loading progress. Gradual progression examples include first displaying text or displaying the dominant colour of an image.\nShifts attention from the wait time to the progress\nGradually displaying the UI over time as opposed to just displaying a loading spinner helps to shift the user’s attention from the wait time to the actual loading progress.\nPerceived to be faster than actual\nBeing able to see loading progress causes the user to perceive that the loading speed is faster than what it actually is.\nFinal UI is not a surprise\nSince the skeleton loading screen is a barebones mockup of the final UI, users know what to expect.\nExamples of loading skeleton screens Let\u0026rsquo;s build a loading skeleton screen! According to research , here are the preferred characteristics of the loading skeleton block:\nAnimation: Wave Direction: Left to right Speed: Slow and steady Colour: Light grey or a neutral colour for the skeleton blocks. For images, use the dominant colour of the image. Ok, let\u0026rsquo;s start building it! If you don\u0026rsquo;t have a development environment set up, you could simply code in something like replit.com or codepen.io ✨\nWe will use this HTML structure:\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;avatar skeleton\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text skeleton\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;text skeleton\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; And apply these CSS styles (note the skeleton class):\n.container { display: flex; align-items: center; } .skeleton { background: linear-gradient(90deg, #eee, #f9f9f9, #eee); animation: leftToRight 1.5s infinite reverse; background-size: 200%; } .avatar { width: 50px; height: 50px; border-radius: 50%; } .info { margin-left: 10px; } .text { width: 100px; height: 16px; border-radius: 4px; margin-bottom: 3px; } @keyframes leftToRight { 0% { background-position: -100% 0; } 100% { background-position: 100% 0; } } Note, it is very important to pair background-position with background-size! Without background-size, the gradient would not move.\nUsing a linear gradient background with a larger background-size eg 200% creates an illusion of a moving gradient or background color. The gradient is initially positioned outside the element\u0026rsquo;s visible area, and as you animate the background-position, it appears as if the gradient is moving inside the element, creating the left to right animation effect. Cool right?! 😄\n","permalink":"https://magdelinehuang.com/posts/011-loading-skeleton/","summary":"But let\u0026rsquo;s start with what even is a loading skeleton and why we need it","title":"🛼 How to Create a Loading Skeleton Animation"},{"content":"The really handy thing about JavaScript is that because of its declarative nature, it comes with various array methods that enable you to perform a myriad of operations without having to explicitly build them (eg using loops, counters etc).\nIn this post, I\u0026rsquo;ll be covering some of the most commonly used methods using this data source as an example:\n// Array of objects const bears = [ { id: \u0026#39;PB\u0026#39;, name: \u0026#39;Pink bear\u0026#39;, qualities: [\u0026#39;hungry\u0026#39;, \u0026#39;cute\u0026#39;, \u0026#39;clingy\u0026#39;], }, { id: \u0026#39;YB\u0026#39;, name: \u0026#39;Yellow bear\u0026#39;, qualities: [\u0026#39;cheeky\u0026#39;, \u0026#39;active\u0026#39;, \u0026#39;caring\u0026#39;], }, { id: \u0026#39;BB\u0026#39;, name: \u0026#39;Blue bear\u0026#39;, qualities: [\u0026#39;caring\u0026#39;, \u0026#39;emotional\u0026#39;, \u0026#39;girly\u0026#39;], }, ] // Array of numbers const ages = [1, 2, 3, 4, 5, 10, 13] // Array of strings const fruits = [ \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;pineapple\u0026#39;, \u0026#39;papaya\u0026#39;, \u0026#39;durian\u0026#39;, \u0026#39;mangosteen\u0026#39;, \u0026#39;strawberry\u0026#39;, ] 1. map() What: Executes the provided function on every element in the array\nReturns: A new array with the updated elements\n// Map objects const mapBears = bears.map((bear) =\u0026gt; bear.name) console.log(mapBears) // [\u0026#39;Pink Bear\u0026#39;, \u0026#39;Yellow Bear\u0026#39;, \u0026#39;Blue Bear\u0026#39;] // Map numbers const mapAges = ages.map((age) =\u0026gt; age * 3) console.log(mapAges) // [3, 6, 9, 12, 15, 30, 39] // Map strings const mapFruits = fruits.map((fruit) =\u0026gt; fruit.length) console.log(mapFruits) // [5, 6, 5, 9, 6, 6, 10, 10] 2. forEach() What: Executes the provided function on every element in the array\nReturns: undefined - it does not return anything! Instead, you need to console.log the result of executing the function on each element.\nmap() and forEach() are similar in that they both perform the same operation and both do not change the original source array, but they differ in that map() actually returns a new array with the results while forEach() does not return anything.\n// forEach objects const forEachBears = bears.forEach((bear) =\u0026gt; console.log(bear.id + \u0026#39;Y2K\u0026#39;)) // PBY2K\\n YBY2K\\n BBY2K\\n // forEach numbers const forEachAge = ages.forEach((age) =\u0026gt; console.log(age * 2)) // 2\\n 4\\n 6\\n 8\\n 10\\n 20\\n 26 // forEach strings const forEachFruit = fruits.forEach((fruit) =\u0026gt; console.log(fruit + \u0026#39; is tasty\u0026#39;)) // apple is tasty\\n banana is tasty\\n mango is tasty\\n pineapple is tasty\\n papaya is tasty\\n durian is tasty\\n mangosteen is tasty\\n strawberry is tasty 3. reduce() What: Executes a reducer function on every element in the array to flatten the array\nReturns: A single output value ie it will do something to the elements in the array and magically return a single value\nThe reduce() function is a little complex so you can read more here // Reduce objects const reduceBears = bears.reduce( (allQualities, bear) =\u0026gt; [...allQualities, ...bear.qualities], [] ) console.log(reduceBears) // [\u0026#34;hungry\u0026#34;, \u0026#34;cute\u0026#34;, \u0026#34;clingy\u0026#34;, \u0026#34;cheeky\u0026#34;, \u0026#34;active\u0026#34;, \u0026#34;caring\u0026#34;, \u0026#34;caring\u0026#34;, \u0026#34;emotional\u0026#34;, \u0026#34;girly\u0026#34;] // Reduce numbers const reduceAges = ages.reduce((totalAge, age) =\u0026gt; totalAge - age) console.log(reduceAges) // -36 // Reduce strings const reduceFruits = fruits.reduce((fruitString, fruit) =\u0026gt; fruitString + fruit) console.log(reduceFruits) // applebananamangopineapplepapayadurianmangosteenstrawberry 4. filter() What: Checks every element in the array to see if it meets certain criteria\nReturns: A new array with the elements that return truthy for the criteria. If no elements meet the criteria, an empty array will be returned.\n// Filter objects const filterBears = bears.filter((bear) =\u0026gt; bear.qualities.includes(\u0026#39;caring\u0026#39;)) console.log(filterBears) // [{id: \u0026#34;YB\u0026#34;, ...}, {id: \u0026#34;PB\u0026#34;, ...}] // Filter numbers const filterAges = ages.filter((age) =\u0026gt; age % 2 === 0) console.log(filterAges) // [2, 4, 10] // Filter strings const filterFruits = fruits.filter((fruit) =\u0026gt; fruit.includes(\u0026#39;y\u0026#39;)) console.log(filterFruits) // [\u0026#39;papaya\u0026#39;, \u0026#39;strawberry\u0026#39;] 5. includes() What: Checks whether the array includes a certain value among its entries\nReturns: true or false\n// Includes objects const includesBears = bears.map((bear) =\u0026gt; bear.name).includes(\u0026#39;Blue bear\u0026#39;) console.log(includesBears) // true // Includes numbers const includesAges = ages.includes(15) console.log(includesAges) // false // Includes strings const includesFruits = fruits.includes(\u0026#39;kiwi\u0026#39;) console.log(includesFruits) // false 6. some() What: Checks whether at least one element in the array satisfies the provided testing function\nReturns: true or false\n// Some objects const someBears = bears.some((bear) =\u0026gt; bear.name.includes(\u0026#39;Yellow bear\u0026#39;)) console.log(someBears) // true // Some numbers const someAges = ages.some((age) =\u0026gt; age % 2 === 0) console.log(someAges) // true // Some strings const someFruits = fruits.some((fruit) =\u0026gt; fruit.length === 6) console.log(someFruits) // true 7. every() What: Checks whether all elements in the array satisfy the provided testing function\nReturns: true or false\n// Every objects const everyBears = bears.every((bear) =\u0026gt; bear.qualities.includes(\u0026#39;caring\u0026#39;)) console.log(everyBears) // false // Every numbers const everyAges = ages.every((age) =\u0026gt; age % 2 === 0) console.log(everyAges) // false // Every strings const everyFruits = fruits.every((fruit) =\u0026gt; fruit.includes(\u0026#39;a\u0026#39;)) console.log(everyFruits) // true 8. find() What: Finds an element in the array that satisfies the provided testing function\nReturns: The first element to satisfy the provided testing function. If no elements satisfy the testing function, undefined is returned.\n// Find objects const findBears = bears.find((bear) =\u0026gt; bear.name === \u0026#39;Yellow bear\u0026#39;) console.log(findBears) // {id: \u0026#34;YB\u0026#34;, ...} console.log(findBears.id) // YB // Find numbers const findAges = ages.find((age) =\u0026gt; age \u0026gt; 10) console.log(findAges) // 13 // Find strings const findFruits = fruits.find((fruit) =\u0026gt; fruit.length \u0026gt; 5) console.log(findFruits) // banana 9. findIndex() What: Finds an element in the array that satisfies the provided testing function\nReturns: The index of the first element to satisfy the provided testing function. If no elements satisfy the testing function, -1 is returned.\n// findIndex objects const findIndexBears = bears.findIndex((bear) =\u0026gt; bear.id === \u0026#39;YB\u0026#39;) console.log(findIndexBears) // 1 // findIndex numbers const findIndexAges = ages.findIndex((age) =\u0026gt; age % 2 !== 0) console.log(findIndexAges) // 0 // findIndex strings const findIndexFruits = fruits.findIndex((fruit) =\u0026gt; fruit.includes(\u0026#39;s\u0026#39;)) console.log(findIndexFruits) // 6 Summary Method What Returns map Executes the provided function on every element in the array A new array with the updated elements forEach Executes the provided function on every element in the array undefined reduce Executes a reducer function on every element in the array to flatten the array A single output value filter Checks every element in the array to see if it meets certain criteria A new array with the elements that return truthy for the criteria. If no elements meet the criteria, an empty array will be returned. includes Checks whether the array includes a certain value among its entries true or false some Checks whether at least one element in the array satisfies the provided testing function true or false every Checks whether all elements in the array satisfy the provided testing function true or false find Finds an element in the array that satisfies the provided testing function The first element to satisfy the provided testing function. If no elements satisfy the testing function, undefined is returned. findIndex Finds an element in the array that satisfies the provided testing function The index of the first element to satisfy the provided testing function. If no elements satisfy the testing function, -1 is returned. ","permalink":"https://magdelinehuang.com/posts/010-js-arrays/","summary":"Nine of the most commonly used array methods","title":"🌸 JavaScript Array Methods"},{"content":"I began my career as a Software Engineer in Jan 2022, so it\u0026rsquo;s been just over a year now since I started working 🤯\nLast week, my colleague James Won and I had the amazing opportunity to present to a Computer Science class at the University of Auckland about our journey and working in frontend.\nHere\u0026rsquo;s an excerpt from the talk where I took a trip down memory lane to reflect on how I ended up here and what I\u0026rsquo;ve learnt along the way.\nSelfie with my colleague (James Won) and the lecturer (Andrew Meads)!\nSelfie with the class!\nHow I ended up as a Software Engineer at a tech scaleup In my final year of university, I considered a few career options. I was interested in software engineering, product management, UX/UI, consulting etc, but I ultimately decided to begin my career as a Software Engineer for several reasons:\nI figured that having the technical experience as a Software Engineer would always be valuable when transitioning to those other roles. For example if transitioning to PM, you will be able to see things from an engineer’s perspective and empathise with them. If transitioning to UX/UI, you know how the code works and can then create dev-friendly designs. Finding grad / junior software engineering roles in NZ is much easier than finding grad / junior PM or UX/UI roles. In fact for PM, there’s pretty much no Associate PM grad programme unless you go for big tech in Australia 🥲 I chose to work at a scale up (a startup in growth phase) because I felt like it was the sweet spot for me. It has more structure and support than an early stage startup, but it has a lot more flexibility for innovation and growth compared to a corporate. (PS See here for my comparison of different types of companies)\nWhere it all began :)\nThings I\u0026rsquo;ve learnt in my first year This past year has been full of new experiences and learnings for me. Here are some things I\u0026rsquo;ve learnt:\n1. Being a junior doesn’t have to be a limiting factor 🧽 When you first begin your career, it’s easy to think of yourself as just “the intern” or “the junior”.\nYou might not feel comfortable speaking up in meetings as you may feel your opinions aren’t valid, or you may not pick up certain tasks as you may think they\u0026rsquo;re beyond your ability.\nHowever you don’t have to label yourself. Everyone starts somewhere. All the seniors were once juniors, and soon there will be juniors after you.\nSo a much healthier mindset to have when you’re starting out is to be a sponge. Everything is new to you so it’s all about trying out different things and gaining experience. It’s the best time to make mistakes because people are also a lot more forgiving / lenient.\n2. Your career is up to you to shape 🗺️ Our education system is very prescriptive. There are different stages to follow and exams to pass. Your degree is highly structured. Everything has a guideline.\nOnce you enter the workforce however, your career is up to you to shape. Most companies have career progression guidelines, but even then, it’s not like you will be promoted automatically after a set number of years of working.\nThe scaleup that I joined had no grad programme hence there was literally no structure for me to follow, so in my first few months of working, I sat down and created a career plan where I outlined what my goals were.\nI decided that my main goal for my first year was to learn as much as I could about frontend and progress to being a Software Engineer 2. I also wanted to gain exposure to other technical areas eg BE, infra, SRE etc.\nI shared all this with my manager so that he knew my intentions, and together we worked on them to achieve them. Around the end of last year, I got my first ever promotion! It’s quite crazy that it happened within my first year and wouldn\u0026rsquo;t have been possible without the support of my mentor , manager, VP, and colleagues. I\u0026rsquo;ll probably write a post about this sometime so watch this space! 👀\n3. You don’t ask, you don’t get 🙋🏻‍♀️ I knew that university and work were very different, but I thought, “Hey, at least I’m doing something related to my degree so it can’t be that different right?” Wrong.\nAfter spending my first few weeks Googling and inundating senior Software Engineers with all my questions, I was starting to doubt my abilities. Massive Imposter Syndrome was creeping up.\nA lot of tech companies have dedicated mentorship programmes for their grads, so I decided to propose this idea to my manager and VP. They were super keen on the idea and one of the seniors volunteered to be my mentor.\nHaving a mentor has been extremely beneficial to my growth so far. We have been able to discuss and clarify mental models which have strengthened my understanding of concepts; I have been able to learn tips and practices that may not be “Googleable” and would have probably taken me years to discover; I have been able to learn from his career experiences and journey.\nI definitely recommend having a mentor and / or being a mentee! Read here on why and how you can start one too.\nMentorship aside however, the key learning here really is that it always pays to ask. If you ask, there is a 50% chance the answer is yes or no. If you don\u0026rsquo;t ask, the answer is 100% no. Choose wisely, my friends 🫡\n4. Learning is a never-ending journey 📚 Uni gives you the basics, but you will still need to do lots of upskilling while you’re working.\nComputer Science mainly teaches you theoretical stuff like databases, algorithms, data structures etc, and I had only learnt Python, Java and C in uni. So pretty much all my frontend knowledge I had to learn via doing personal projects, courses, and on the job.\nTech is a constantly evolving field and there’s always going to be new languages and frameworks to learn. Now there’s also stuff like ChatGPT and we need to figure out how to make it complement our work rather than it steal our jobs lmao 🤡\nAnd to be honest, I think this applies to all fields, not just tech. There’s a Chinese saying that goes “活到老，学到老” that literally translates to “You learn for as long as you live” 👵🏻\nHere are some resources I recommend::\nyoutube.com/@Fireship - Super cool short and snappy videos bytes.dev - JavaScript newsletter reactdigest.net/ - React newsletter programmingdigest.net/ - Generic programming newsletter marksheet.io - HTML and CSS handbook htmlreference.io - HTML cheat sheet cssreference.io - CSS cheat sheet javascript.info - JavaScript handbook softchris.github.io/books/react/ - React handbook matchstiq.io - Job listings for tech companies in NZ earlywork.co/content - Super helpful ANZ resource on startups for students and early career peeps 5. Get involved in the local dev community 💕 When we’re at uni, there are plenty of clubs and societies for us to join. But when you enter the workforce, it’s really hard to find a community outside of work.\nThere’s a platform called Meetup that has plenty of such groups you can join:\nmeetup.com/full-stack-dev-new-zealand/ meetup.com/auckland-developers/ meetup.com/JuniorDev-Auckland/ meetup.com/women-in-tech-meetup-auckland/ meetup.com/akl-net/ I recently went to my first ever dev event which was on accessibility and open-source software. Here is my blog post on what I learnt about accessibility!\nThoughts In conclusion, I had a great year 😁 Working life is proving itself to be more fun and enjoyable than student life 🤣 I\u0026rsquo;m not missing those assignments and deadlines anytime soon 😅\nWhile I\u0026rsquo;ve grown a lot in my technical and soft skills this past year, there\u0026rsquo;s still lots of room for improvement so I\u0026rsquo;m looking forward to more learnings in year two!\nAlso, super grateful to have been able to share about my experiences to the Comp Sci students at UoA! Never thought I\u0026rsquo;d be giving a talk at a uni in my life 🤯 Thank you to my colleague and the lecturer, Andrew Meads, for the opportunity!\n","permalink":"https://magdelinehuang.com/posts/009-learnings-from-year-one/","summary":"Reflections on how I ended up here and what I\u0026rsquo;ve learnt along the way","title":"👩🏻‍💻 Learnings From My First Year as a Software Engineer"},{"content":" I recently attended my first ever dev meet up hosted by Full Stack Dev Group !\nHere\u0026rsquo;s my takeaways from the accessibility talk by Ben Evans . You can find the slides here .\nWhat is more accessible is highly dependent on the user. Eg larger text would be more accessible for users with failing sight but smaller text would be more accessible for users with tunnel vision. So bottom line is to cater accessibility of your platform to your largest user group. Might be a little controversial but web accessibility kinda got worse with the emergence of CSS and JS frameworks (cue random divs and spans 🥲) Use semantic HTML! Eg instead of making a custom accordion, use the inbuilt HTML \u0026lt;details\u0026gt; and \u0026lt;summary\u0026gt; tag. I was actually working on building an accordion that time and had just learnt about those tags so super cool to have it mentioned in the talk! You don’t need alt text for everything 👀 If it’s just a decorative image, just provide a blank alt. If it’s conveying info like a graph, explicitly specify the info. How can we get businesses and not just FE devs and designers to care about accessibility? Just do it 🤡 Of course there might be certain times where you need to make a calculated decision and sacrifice accessibility, but the point is to not ask for permission and just always have accessibility at the core of what you do. So how do we actually make our website more accessible? The speaker Ben Evans gives some great practical tips from slide 22 onwards. There’s also a bunch of resources on slide 37. Overall, really great talk! Thanks Ben 😁\n","permalink":"https://magdelinehuang.com/posts/008-accessibility/","summary":"My takeaways from a talk on accessibility","title":"♿️ Accessibility"},{"content":"If you manage your Git workflow via the terminal and your terminal is Oh My Zsh , then you\u0026rsquo;re in for a treat.\nOh My Zsh has a bunch of built-in aliases for Git commands which are an absolute game-changer 🤯\ngst = git status # status of your repo and changes gapa = git add --patch # choose which changes in a file to commit gaa = git add --all # stage all your changes gcmsg = git commit -m # commit with a message gco = git checkout # change to a specific branch gcb = git checkout -b # create a new branch off the current branch and change to it at the same time gp = git push # add your changes to the remote repo gpsup = git push --set-upstream origin $(current_branch) # push a local branch to remote gl = git pull # obtain the latest changes from the remote repo gm = git merge # combine various versions of a file or folder grhh = git reset --hard # undo all your changes gsta = git stash push # add to your stash gstp = git stash pop #remove from your stash See here for the complete list of aliases.\nAnd if you forget what an alias does, just do this which \u0026lt;alias\u0026gt; eg\n\u0026gt; which gst gst: aliased to git status ","permalink":"https://magdelinehuang.com/posts/007-zsh-git-aliases/","summary":"Supercharge your Git workflow in Oh My Zsh","title":"✨ Oh My Zsh Git Aliases"},{"content":" After I graduated from Computer Science, I began my career as a Software Engineer. While I knew that university and work were very different, I thought, “Hey, at least I’m doing something related to my degree so it can’t be that different right?” Wrong 😅 After a few weeks of Googling and inundating senior Software Engineers with all my questions, I was starting to doubt my abilities. Massive Imposter Syndrome was creeping up 🥲\nIt quickly became clear to me that I needed to take action. I knew that other tech companies, especially the larger ones, had dedicated mentorship programmes for their graduate employees, so I decided to propose this idea to my manager and VP. They were fully onboard! I had a discussion with one of the seniors and they agreed to be my mentor. Perfect! 🥳\nHow to form a mentor-mentee relationship The next steps were establishing the mentor-mentee relationship. We discussed:\nIndividual goals This included short-, mid-, and long-term goals. A mentor-mentee relationship should be a two way street and, as such, we had an open discussion about what each of us wanted out of this arrangement. As a mentee, learning and growing was my goal so I came up with a bunch of technical areas I wanted to get up to speed in. My mentor wanted to practise explaining advanced technical concepts in a simple way, improve their mentoring abilities more generally and, in doing these two things, find any holes in their technical mental models. For example, it’s one thing to know React will re-render, but it’s another to know why it re-renders.\nBoundaries and expectations We established that the purpose of the mentorship programme was to focus on meta topics and creating accurate mental models of technical concepts. It was not for unblocking any day-to-day work. The idea was that with all the learnings from the mentoring sessions, over time, I would have enough knowledge to be able to unblock myself.\nStructure For these dedicated mentoring sessions, we decided that one hour per week on a Friday worked best for us. During the initial months, we also had a check-in every 4 weeks to reflect on how the programme was going, give each other feedback, and make any necessary meta improvements.\nSession agenda We agreed that having a meeting agenda was very important for us. Throughout the week, I would note down any questions that popped up. I would aim to get all of the questions down by EOD Thursday so that my mentor could prepare in advance. One of the most important things to be aware of when forming a mentor-mentee relationship is to respect each other’s time, particularly the senior mentor who is often time-poor. Preparing the meeting agenda beforehand ensures that both parties will maximise their value from these sessions.\nBenefits of having a mentor-mentee relationship We have had this mentorship programme running for around a year now, and it has been an absolute game-changer.\nFrom a mentee perspective From a mentee perspective, I have found it incredibly beneficial to have an experienced Software Engineer as a mentor to learn from. We have been able to discuss and clarify mental models which have strengthened my understanding of concepts; I have been able to learn tips and practices that may not be “Googleable” and would have probably taken me years to discover; I have been able to learn from his career experiences and journey.\nMy technical skills and knowledge have also improved tremendously compared to when I first started out, and it has been very encouraging to be able to see and feel this difference. For example, I am not blocked as frequently anymore, or even if I am, I can unblock myself, and that is because of the correct mental models I have now. Ultimately, it is also really good for the company, because work gets done faster! The biggest testament to my growth so far has been my recent promotion to Software Development Engineer 2 in just 9 months! This definitely would not have been possible without the support of my mentor and colleagues.\nFrom a mentor perspective I asked my mentor what they gained from the relationship, and here’s what they had to say:\n“Learning how to explain complicated topics in a simple way is a critical skill for advancing past senior. This mentorship (and the honest feedback loop we’ve established) has helped hone that skill.” “Sometimes it’s hard to know what I don’t know. Mentoring really highlights those gaps in knowledge or mental models. I can then fill that gap through research - in particular learning about the topic with my mentee so they can see how I go about learning / Googling too.” “In my opinion, mentoring in software development should be more than teaching technical concepts or providing technical guidance. There are a plethora of meta topics surrounding the job which are important to explicate - such as career progression, remuneration expectations and outside-of-work coding. These are critical soft skills for a mentor to develop alongside their technical coaching abilities. Mentoring has helped immensely with this development.” “Making a habit of sharing new and interesting learnings, in an accessible way, has definitely helped me cement those learnings in long term memory. There’s nothing quite like explaining something in your own words when it comes to long term memory retention.” One thing to note is that since software is inherently opinionated and opinions vary wildly, it is important for the mentee to supplement their learnings from their mentor by continuing to engage with other software engineers for their opinions. This allows for a well-rounded, unbiased perspective and also fosters healthy relationships with everyone in the team.\nConclusion It’s been a year since I began my career (in fact I just had my 1-year work anniversary! 🥳) and there is no doubt about how invaluable this mentor-mentee relationship has been. It’s contributed much to my growth and that of my mentor. No matter your level of seniority, I believe there is always knowledge to exchange across levels. So, get out there and become a mentor, mentee or both! Your career will thank you.\n","permalink":"https://magdelinehuang.com/posts/006-mentorship/","summary":"And how you can start one","title":"🍎 Why a Mentor-Mentee Relationship is so Important"},{"content":" Doing an internship is one of the most important things you can do as a student, and it usually increases your chances of securing a job after graduation. My aim with this post is to include everything you need to know about this topic as a student. Ambitious aim, but let\u0026rsquo;s go! 🥳\nPro tip: Click on the Table of Contents to navigate through this super long post 😉\nSome necessary clarifications before we begin:\nThis post will be focussed on general degrees like BComs, BScis, BArts etc rather than specialised ones in the health field as they are quite different, especially regarding the application process and where to find them, but hopefully you’ll still find other areas helpful like how to write a resume. The section on where to find internship and job listings has sites that are specific to New Zealand. Internships and jobs are pretty much the same thing, but for the sake of this post, we are going to establish that an internship is undertaken while you are still at uni while a job is for after you graduate. What is the purpose of an internship? There are many reasons why doing an internship is important. Here are the main ones:\n1. Learning The main purpose of an internship is for learning. You can learn in many areas:\nTechnical skills\nThis is the most obvious one. What you do at uni and work are very different, so getting the chance to work in the industry is an invaluable experience. It can also help you to synthesise and give meaning to what you learn at uni.\nFor example, when I did my Web Developer internship at a tech startup, I was exposed to all the tools and processes of working in the tech industry. I also got to learn the programming languages that are used in the industry, which again are quite different to what you learn at uni.\nSoft skills\nAside from technical skills, you also learn soft skills like how to work with others, especially people of different ages, how to communicate well, how to give and receive feedback, and how to give presentations.\nLearn about yourself\nPersonally, I think this is the most important learning. Through doing an internship, you can discover what you enjoy and do not enjoy doing.\nIf, for example, during your internship, you realise that the work is just not for you, you now know that maybe you should not explore that path in the future. So if you have the opportunity, do as many internships as you can in various different roles / fields! (but remember not to burn out 😅) Ultimately, the more internships you do, the closer you should get to discovering what career you want to pursue after you graduate.\n2. Get paid! It goes without saying, but this is also a huge reason why internships are important.\nAnd by the way, in this day and age, it is very frown upon if employers do not pay interns, so if a company says an internship is unpaid, think twice about it 🤡\n3. Build up your resume It looks great on your resume if you have completed at least one internship. It doesn’t really matter what the company is.\nHaving completed an internship shows that you are proactive and dedicated to learning, qualities which every employer wants their employees to have, so it can make it easier to find jobs after you graduate.\nWhat internships and jobs should you apply for? It’s not about what skills you have but what skills you want, and that’s because most of our learning happens on the job. So if you feel like you don\u0026rsquo;t meet all the criteria on the job description, apply anyway! If you meet 100% of the criteria, you\u0026rsquo;re overqualified 😛\nI was reading an article recently and that was my biggest takeaway. I\u0026rsquo;m including this paragraph here for all you students out there suffering from Imposter Syndrome 🥲\nWhat are the skills you want? It’s not about what skills you already have! The vast majority of our learning happens on the job. But I see people not considering the roles they want because they don’t feel like they already have all the skills of that job. I’ve had a lot of CS college students tell me they’re not applying for programming jobs because they don’t feel like they’re strong programmers. Of course they aren’t! They’re still in college. The vast majority of our learning happens on the job. - Tanya Reilly Here\u0026rsquo;s an example: Let’s say you study Data Science and want to apply for a Data Scientist role but they list a bunch of skills like R and Python programming. You might not have much experience in them but really want to build on those skills. If so, go ahead and apply, because you’ll end up learning those skills on the job, and the more you do it, the better you will get.\nIf though, you are a Business student, for example, and want to do a Data Scientist internship because you want those skills, it’s not impossible, but you will have to put in a bit more effort. You might have to show that you do have some knowledge eg by doing online courses, writing articles about the topic and doing some personal projects.\nWhen should you start the application process? If you’re applying for companies that have internship and grad programmes, usually applications open:\nAround July to September for internship programmes Around March till the end of the year for grad programmes If there’s a company in particular that you want to apply for, I suggest browsing their website at the start of the year (preferably March) to look out for when the applications open, or even just email their recruitment team.\nIdeally, if you want to stand a chance of getting a good internship or job, one that you really vibe with, you need to invest a decent amount of time into looking for and applying for them. It is quite tedious though because it’s basically a job in itself 🥲\nWhere can you find internship and job listings? There are many places where you can find them:\nCareer fairs and club events - Usually company representatives come into the campus to talk about their programmes. I highly recommend these as you get to ask questions in person, and sometimes they also give you tips for their application process. Plus there’s usually free food! 😋 Careers department - You could also go to your career department and talk to them about this. They can help you with your resume and application too. GradNZ - Your go-to site for finding internships and jobs for all areas of study Nxtstep - Same as GradNZ Student Job Search - This site is more for student jobs in general, but sometimes companies do list their programmes here. I\u0026rsquo;ve seen governmental internships like the GovTechTalent internship listed here. https://www.moneyhub.co.nz/internships.html - A nice master list of internships for all areas of study Matchstiq - This site is all about jobs at New Zealand\u0026rsquo;s best startups and tech companies. They list a variety of roles from tech to business, so it\u0026rsquo;s not all just tech-focussed jobs. The listings are general job listings though, but usually around the internship to grad role application period, you can find those roles listed there. Summer of Tech - Your go-to for finding tech-focussed internships and grad roles Microsoft Student Accelerator - This is a programme for tech students that runs various workshops on industry skills to prepare students for placement at Auckland\u0026rsquo;s leading IT companies. JOBDUN - This is only for Dunedin and it’s where I found my internship! Job sites like SEEK, Indeed, LinkedIn etc - The list wouldn\u0026rsquo;t be complete without these 😉 While these are general job sites, you can sometimes find some gems there! What should you consider when applying for a job? The job description and title These matter more than you think.\nThe job description will give you a good idea of what to expect in the job and the title will be how you get assessed in the future. For example if your title is Graphic Designer, but you are really doing Product Design work, if you try to apply for Product Design roles in the future, it might be quite challenging as your title said Graphic Designer. So it pays to check if the work you\u0026rsquo;re expected to do matches up with your title.\nThe type of company The two main types of companies are big corporate companies and startups / scaleups.\nHere\u0026rsquo;s a rough comparison between the two:\nBig Corporate Startup / Scaleup Structured internship or grad programme More free-flowing - flexibility to customise it yourself Various rotations in different departments Forefront of innovation Good name on your resume Faster rate of learning and growth Can be slow to effect change Chaotic Some disclaimers:\nThey are both great options in my opinion - neither is better than the other. You can have great learnings at both types of companies. Ultimately it all just depends on what your goals are and which you vibe with more. I\u0026rsquo;ve grouped startups and scaleups in the same category, but they are quite different. More accurately, I would say that scaleups are in between big corporates and startups. A startup usually has \u0026lt;20 people while a scaleup can have \u0026gt;100 people. A startup is still in its early stage and in the process of validating their product. A scaleup is in growth phase and has found product-market fit. Because of these characteristics, scaleups tend to have more structure and stability than a startup while still having elements like being flexible and having a faster rate of learning and growth. How do you get internships and jobs? The application process varies between companies and type of role but is usually like this:\nApply online → Online assessment eg technical test or some psychometric test → Second test eg on-site day → Interview → Offer\nThere’s a lot to keep track of, so it’s good to have a place where you can record the progress of each. I recommend this Notion Job Application tracker 🗂\nNotion Job Tracker\nHow to write a resume This is quite a chunky topic but I have made a video plus example resume on it before which you can watch below 👇\nAnyhow, here\u0026rsquo;s a quick summary:\n1. Content\nYour resume should have these these sections as a rule of thumb: Contact Details, Education, Skills, Work Experience, Extra-curriculars, Personal Projects\n2. Not more than two pages\nRecruiters only look at your resume for a few seconds, so it\u0026rsquo;s critical that the important details are clear and concise.\n3. Tailored to each job\nOne of the biggest mistakes is submitting the same resume to every job you apply to.\nEvery job description is different, so make sure you tailor your resume to it. You can do this by using key words from the job description.\nImagine submitting the same resume for a Software Engineering role and a Business Analyst role 🥲 They’re two very different roles, so you want to place more emphasis on different skills and achievements for each role. For example, for the Software Engineering role, you want to highlight your technical skills and technical projects; for the Business Analyst role, you want to highlight your business and and data skills.\nChoose wisely what skills you want to showcase depending on the role.\n4. Quantitative and specific\nA good way to hook the recruiter is to be quantitative and specific in your resume.\nShow what you did → How you did it → Impact it created\nAlways use numerical figures to back up your claims eg instead of \u0026ldquo;The platform helped end users dramatically\u0026rdquo;, write \u0026ldquo;The platform helped end users increase their returns by 5000%\u0026rdquo; (yes I\u0026rsquo;m exaggerating loool)\n5. Diversify your examples\nTry to showcase your skills in a variety of areas such as leadership, community work, etc.\nFor example, if you already mentioned that you are the leader of a club, you don\u0026rsquo;t have to mention how you were a class representative for a paper because they both demonstrate leadership.\n6. Structured and good formatting\nMake sure you have clear titles and bullet points, consistent fonts and font size throughout.\n7. No spelling mistakes\nMake sure you proof-read your resume!\n8. Up-to-date\nIdeally have experience within the last 3 or so years.\nHow to stand out If we think about what an employer wants in an employee, they want someone who is proactive, committed to learning, has good interpersonal skills, and has the technical knowledge required for the job. Arguably, the last one is less important as the whole point of you doing an internship is to learn.\nHere are some ways you can demonstrate these skills:\n1. Good grades\nThis is the best indicator of work ethic and commitment an employer has of you as a student, so you should always try to aim for good grades. But while they are important, they are not everything.\n2. Involvement in extracurriculars\nUni is not all about studying! Try to be involved in clubs and take on positions in the committee. You could even start your own club. Join events, competitions and hackathons too!\n3. Have a portfolio of skills\nFor example, if you\u0026rsquo;re going for a software engineering role, do technical projects eg making your own app. If consulting, then do an analysis / presentation on a business problem.\n4. Networking\nNetworking doesn’t mean you have to be an extrovert and sell yourself! It just means that you should make an effort to meet different people and talk to them. Not with the intention of using them, but more of to build a relationship.\nIt should go both ways too eg an experienced individual in the industry may want to reach out to students which you could help with, and you might want to know if there\u0026rsquo;s any job opportunities in said individual\u0026rsquo;s company which they could help with.\n5. LinkedIn\nSpeaking of networking, we cannot forget LinkedIn 🤓 Prospective employers would most probably do a wee stalk of you so it doesn\u0026rsquo;t harm to have a good profile.\nHow to decide between multiple offers? Now, if you are in the fortunate position of having multiple offers to choose from, first of all, congratulations! 🥳\nNow comes the hard bit - which should you choose?\nOne tool that can help you make this decision is a weighted decision matrix. Here\u0026rsquo;s a great template on ruminate.io (PS this site has a lot of great tools in general for making better decisions)\nSimply list down several criteria which are important to you eg alignment with values, salary, benefits etc and give them a weight. The higher the weight, the more important it is to you. Then for each offer you have, rate how closely each criteria is met on a scale of 1 - 10 (1 being appalling and 10 being fantastical).\nWeighted Decision Matrix\nNote: Please ignore all the values in that matrix - they are completely arbitrary! I was just randomly putting in figures to generate this table 🤣\nTL;DR The main purpose of an internship is for learning (technical skills, soft skills, learn about yourself) It’s not about what skills you have but what skills you want, and that’s because most of our learning happens on the job. Start applying for internships and jobs early (ideally March). If you’re not sure when they open, reach out to the recruitment team. Perfect your resume and LinkedIn Get involved with extracurriculars Have a portfolio of projects and skills to showcase Networking is important (but doesn\u0026rsquo;t have to be scary!) Applying for jobs and internship programmes is a process, so make life easier by having some tools to manage the process eg a job application tracker and a decision matrix. I hope you found this helpful, and if you did, please show some love below and share it with anyone you think might benefit from it 🥰\nIf you have anything to add or suggest, feel free to contribute by clicking on the \u0026ldquo;Suggest Changes\u0026rdquo; button at the top of the post!\nAll the best with your applications - let\u0026rsquo;s get this bread! 🍞\n","permalink":"https://magdelinehuang.com/posts/005-internships/","summary":"A guide to internships and jobs","title":"👩🏻‍🎓 Internships and Jobs 101"},{"content":" What is a postmortem A postmortem in tech is basically a process where teams dissect and reflect on an incident that usually happened in Production. They document what happened, learnings, and how to avoid it in the future. There\u0026rsquo;s no naming and shaming the perpetrator of the incident.\nPostmortems are not about figuring out who to blame for an incident that happened. They are about figuring out, through data and analysis, what happened, why it happened, and how it can be stopped from happening again. - Arni Birgisson My first incident As luck would have it, I had my first incident last week 😅\nLet me explain: I was the feature lead for a feature. The feature involved replacing some old components with new ones. One of the components replaced also had a validation check added to it. This check was run through Product, and the whole feature underwent extensive QA testing in various environments. Everything was going smoothly so when I received the green light, I shipped the feature aka I released it into our production code base, meaning our users would be able to access the feature.\nI posted an announcement in the release channel then gave myself a pat on the back. Woohoo! 🥳 This feature took several sprints and I was so glad it was finally shipped.\nAbout half an hour later, my colleague alerts me of a tech support ticket created regarding my feature. Not too long after, I get pulled into another Slack thread regarding the same issue reported about the feature. Before I know it, an incident management process is kickstarted and my feature gets reverted from production 🤡\nA wave of emotions overcome me. Embarrassment, humiliation, sadness, disappointment, perplexion, indignation.\nI knew that it wasn\u0026rsquo;t my fault, or anyone\u0026rsquo;s fault for that matter, and no one was blaming me either. But, since I made the change and shipped the feature, I couldn\u0026rsquo;t help but feel a sense of responsibility. And you know, your first one just hits differently ok? 🥲\nSo first things first. I\u0026rsquo;m human and it\u0026rsquo;s natural to feel all these emotions, so I allowed myself to acknowledge them instead of just brushing them away.\nThen I reflected on the whole process and wrote some notes in preparation for our postmortem meeting. I documented what happened, why it happened, the incident timeline, mitigations, and various discussion points.\nThe meeting went smoothly and we had some great discussions, even discovering another unrelated issue through this incident.\nAll was well.\nWhat I learnt This incident sparked a bunch of thoughts:\n1. What constitutes a discussion As I was working on the feature, I came across a bug in the same area that was present in production. I posted a message in the feature channel about the bug and whether a certain field was required. Product replied that it was. Because of that, I added the validation check. This validation check ended up being the cause of the incident.\nIn retrospect, that was hardly a discussion 😅\nIt was simply a question and answer on Slack.\nHad I messaged more and clarified if it would be alright to add the validation check, perhaps we might have done a bit more thinking about the user flow of the form. And just maybe, this issue could have been picked up on.\n2. User testing is so important Everything seemed to be going fine with my feature. It passed all the code reviews, it passed all the QA testing.\nSo why did this validation check issue not get picked up on?\nIt\u0026rsquo;s because we did not test it with the end users themselves.\nSure, we as engineers and testers can write and test our feature, but how we use it might be very different to how our end users use it.\nHere\u0026rsquo;s a meme of how differently engineers and users think 🤣\nSide note: Usually before we release a feature, we will have a Bug Bash, an event where various people, both from the Product and Engineering Team and the wider business, will test out the feature. It\u0026rsquo;s where these sorts of issues get picked up on. But because of the small scale and low risk of this feature, we didn\u0026rsquo;t have one 🥲\n3. Writing tests for your code is key Tests are a great way to spot an issue before it occurring.\nYou bet that after we fixed the issue, we wrote tests for various scenarios to prevent this issue from happening again 🤡\n4. After releasing a feature, monitor the bugs channel It goes without saying, but one should always monitor the bugs channel after a feature is released.\nI never did this in the past because of how low risk my releases were, but this incident taught me a lesson.\nAlways monitor the bugs channel after a release so that you can be on standby to put out any fires! 🔥\n5. How to manage incidents in the future Since this was my first time getting involved in an incident, I was pretty clueless about the incident management process, so shout out to my colleagues for carrying me through. To put it bluntly, I felt like I was a bystander observing the firefighters put out a fire I had caused lmao 🤣\nOn the bright side, this was a fantastic opportunity for me to get acquainted with the process!\nAfterthoughts Thankfully, this incident was fairly small, low risk, and was resolved relatively quickly. There was no impact on the customers either.\nEveryone congratulated me for my first incident / postmortem because it\u0026rsquo;s something we all experience at some point and graduate from 😅\nMy manager also told me that experiencing your first incident is a sign that you\u0026rsquo;re growing fast and should be celebrated.\nMy VP of Engineering even said he\u0026rsquo;s over the moon about us having more incidents as there is no cheaper time than right now in a fast-growing business to have incidents and practise handling them so we can build robust and resilient processes.\nI really appreciate the blameless culture we have here as it makes making and learning from mistakes a lot easier.\n","permalink":"https://magdelinehuang.com/posts/004-my-first-post-mortem/","summary":"I \u0026lsquo;broke\u0026rsquo; production 😅 Here\u0026rsquo;s what happened and what I learnt","title":"💀 My First Postmortem"},{"content":"Are you doing lots of non-promotable work?\nAre you getting closer to your career goals?\nHere\u0026rsquo;s my takeaways from this insightful write up by @whereistanya on being glue and other tech career tips https://noidea.dog/glue PS Read this if you\u0026rsquo;re underrepresented in tech 👩🏻‍💻\n1. Ask yourself what you want to get better at It\u0026rsquo;s not about what skills you have but what skills you want because most of our learning happens on the job.\nDon\u0026rsquo;t deprive yourself of an opportunity before even trying.\n2. You get better at what you spend time on Keep doing glue work and you\u0026rsquo;ll get better at glue.\nKeep coding and you\u0026rsquo;ll get better at coding.\nNo matter what you end up doing though, you are unlikely to regret feeling more confident in core technical skills.\n3. Learning can and should happen at work If the skills you wish you had are part of the job you\u0026rsquo;re doing all day, that\u0026rsquo;s pretty much learning on the job.\nWe need to talk more about learning in public because so much of the tech industry is built on this very skill.\nI particularly found comfort in this paragraph 🥲\nWhat are the skills you want? It\u0026rsquo;s not about what skills you already have! The vast majority of our learning happens on the job. But I see people not considering the roles they want because they don\u0026rsquo;t feel like they already have all the skills of that job. I\u0026rsquo;ve had a lot of CS college students tell me they\u0026rsquo;re not applying for programming jobs because they don\u0026rsquo;t feel like they\u0026rsquo;re strong programmers. Of course they aren\u0026rsquo;t! They\u0026rsquo;re still in college. The vast majority of our learning happens on the job.\n4. Leaving a technical role early could potentially limit you It sucks, but as soon as \u0026ldquo;Engineer\u0026rdquo; is removed from your title, people assume you\u0026rsquo;re not technical.\nIt\u0026rsquo;s a common implicit bias.\nIt could potentially make it difficult to come back to a technical role in the future.\n5. Questions to ask yourself when job-seeking: What would you love to get better at? What is a job that you\u0026rsquo;ll feel happy and proud to do? What doors are you comfortable making hard to reopen? Where will you feel safe? 6. Women volunteer more. Women are volunteered more. \u0026ldquo;When there is non-promotable work to be done, women volunteer to do it 48% more often than men.\u0026rdquo; Harvard Business Review It\u0026rsquo;s not that men don\u0026rsquo;t volunteer. It\u0026rsquo;s just that they know a woman will volunteer if they wait.\n7. Non-promotable tasks should be shared equally When there\u0026rsquo;s work that doesn\u0026rsquo;t really fit anyone\u0026rsquo;s job descriptions, it needs to be shared equally between teams. It needs to be tracked too.\nIt shouldn\u0026rsquo;t just get picked up by whoever is free.\n8. Titles do matter, esp for underrepresented folks Stereotypes in tech mean that if you don\u0026rsquo;t fit a certain persona, people assume you can\u0026rsquo;t code / don\u0026rsquo;t belong.\nJob titles help underrepresented folk save time and energy they don\u0026rsquo;t need to validate their credibility.\n9. If you\u0026rsquo;re underrepresented, getting promoted is diversity work. You can\u0026rsquo;t be what you can\u0026rsquo;t see, so you getting promoted can be a huge inspiration to others in your shoe.\nYou\u0026rsquo;ll also be in a better position for sponsorship and mentorship.\nTL;DR Ask yourself what you want to get better at You get better at what you spend time on Learning can and should happen at work Leaving a technical role early could potentially limit you Ask yourself these 4 questions when job-seeking (see post) Women volunteer more. Women are volunteered more. Non-promotable tasks should be shared equally Titles do matter, esp for underrepresented folks If you\u0026rsquo;re underrepresented, getting promoted is diversity work. ","permalink":"https://magdelinehuang.com/posts/003-being-glue/","summary":"My takeaways from a really famous career talk by Tanya Reilly. PS read this if you\u0026rsquo;re underrepresented in tech","title":"🔎 Being Glue"},{"content":"Variables Variables point to values and associate them with a name.\nThere are three keywords to define variables:\nvar It is used in pre-ES6 versions of JS and is no longer used currently It is global scoped or function scoped let It is the preferred way to declare a variable when it can be reassigned It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in You can declare a let variable without assigning it to a value let hobby; console.log(hobby); // undefined hobby = \u0026#34;reading\u0026#34;; console.log(hobby); // reading hobby = \u0026#34;sleeping\u0026#34;; console.log(hobby); // sleeping const It is the preferred way to declare a variable with a constant value It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in You cannot declare a const variable without assigning it to a value const happy; // Throws SyntaxErrror as it is not initialised const happy = true; console.log(happy); // true happy = false; // Throws TypeError as it cannot be reassigned const happy = false; // Throws SyntaxError as it cannot be redeclared While const variables cannot be reassigned or redeclared, it does not mean that the value which the const variable points to is immutable (cannot be changed). In this example, we have a const variable called emotion which points to an object. Objects are non-primitive and mutable.\nconst emotion = { happy: true, }; emotion.happy = false; console.log(emotion); // { happy: false } Conventions for naming variables:\nCan only contain letters, numbers (cannot be at the front), $ and _ Cannot include reserved keywords eg new, function, name Should not start with an upper case letter Variables that are a constant and will never change should all be in upper case Should be in Camel case (ie first letter of first word is in lower case, first letter of subsequent words is in upper case) eg firstName Should be as descriptive as possible eg instead of h do height; instead of school1 do primarySchool Some points to consider:\nAs a rule of thumb, use const by default and let only when you are really sure that the variable needs to change at some point in the future. It is good practice to have as little variable mutations or changes as possible so that there is a lower chance of bugs being introduced. Technically you could define a variable without giving it a keyword and it would still work, but it is not a good idea as it does not create a variable in the current scope. Instead, JavaScript will create a property on the global object. Since a variable, regardless of its keyword, simply points to a value, this means that the behaviour of the value being changed depends on the type of value being manipulated. Value Types In JavaScript, there are 8 different types of values, and only Objects are mutable.\nYou can check the type of a variable by using the typeof() function:\nlet hobby = \u0026#34;reading\u0026#34;; typeof hobby; // \u0026#39;string\u0026#39; const happy = true; typeof happy; // \u0026#39;boolean\u0026#39; const emotion = { happy: true, }; typeof emotion; // \u0026#39;object\u0026#39; Note: JavaScript has dynamic typing meaning we do not have to manually define the type of a variable. Instead, they are determined automatically.\nPrimitive (immutable) values Primitive values are immutable, meaning they cannot be changed. Each value is unique and independent.\n1. Undefined There is only one value of this type \u0026ndash; undefined It is an unintentionally missing value eg if you declare a variable but don\u0026rsquo;t assign it to something, it will point to undefined It will throw an error if you try to access its properties let book; console.log(book); // undefined console.log(book.author); // Throws TypeError as it cannot read properties of undefined 2. Null There is only one value of this type \u0026ndash; null It is an intentionally missing value. This is the main difference between undefined and null. It distinguishes a coding mistake (which might result in undefined) from valid missing data (expressed as null). It will throw an error if you try to access its properties It is incorrectly described as an Object when you do console.log(typeof(null)) but this is a historical JS bug let book = null; console.log(book); // null console.log(book.author); // Throws TypeError as it cannot read properties of null console.log(typeof book); // object (notice how it is not null as it should be 🤦🏻‍♀️) 3. Boolean There are two values of this type - true and false It is used to perform logical operations let isRaining = true; let isSunny = !isRaining; // false let isRainbow = isRaining \u0026amp;\u0026amp; isSunny; // false let isHappy = isRaining || isSunny; // true 4. Number JS uses numbers with limited precision. Their decimal part offers more precision closer to 0, and less precision further away from it. Hence in floating-point maths , there are only 18 quintillion numbers unlike how there is an infinite set of numbers in real maths. typeof(NaN) is a number because NaN is a numeric value. It’s called “Not a Number” because it represents the idea of an “invalid” number. Floating point maths includes a few special numbers - Nan, Infinity, -Infinity, and -0 let scale = 0; let a = 1 / scale; // Infinity let b = 0 / scale; // NaN let c = -a; // -Infinity let d = 1 / c; // -0 5. BigInt Regular numbers can’t represent large integers with precision, so BigInts fill that gap It has arbitrary precision, meaning there is an infinite number of BigInts - one for each integer in maths It usually has n at the end It is typically used in financial calculations where precision is important let alot = 9007199254740991n; // n at the end makes it a BigInt! console.log(alot + 1n); // 9007199254740992n console.log(alot + 2n); // 9007199254740993n console.log(alot + 3n); // 9007199254740994n console.log(alot + 4n); // 9007199254740995n console.log(alot + 5n); // 9007199254740996n 6. String It can be represented with single quotes '', double quotes \u0026quot;\u0026quot;, or backticks `` It has several built-in properties let country = \u0026#34;New Zealand\u0026#34;; console.log(country.length); // 11 console.log(country.toUpperCase()); // NEW ZEALAND console.log(country[4]); // Z 7. Symbol It is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that\u0026rsquo;s guaranteed to be unique It is similar to door keys whereby it lets you hide some information in an object and control which parts of the code can access it It is rarely used Non-primitive (mutable) values Non-primitive values are mutable, meaning they can be changed.\n8. Object It can be used to store keyed collections of various data It includes arrays, dates, RegExps, functions, and other non-primitive values Its properties can be accessed with . (dot notation) or [] (bracket notation) let book = { title: \u0026#34;Sweet Bean Paste\u0026#34;, author: \u0026#34;Durian Sukegawa\u0026#34;, }; console.log(book.title); // \u0026#34;Sweet Bean Paste\u0026#34; console.log(book[\u0026#34;author\u0026#34;]); // \u0026#34;Durian Sukegawa\u0026#34; book.title = \u0026#34;Pinza no Shima\u0026#34;; console.log(book.title); // \u0026#34;Pinza no Shima\u0026#34; Quiz Here\u0026rsquo;s a quiz to check for your understanding. Answers included in the comments (but don\u0026rsquo;t cheat!) All credits go to Ben Coullie for this!\n1; let q = \u0026#34;yass\u0026#34;; q = \u0026#34;nooo\u0026#34;; console.log(q); 2; const w = \u0026#34;yass\u0026#34;; w = \u0026#34;nooo\u0026#34;; console.log(w); 3; let e = \u0026#34;yass\u0026#34;; e[0] = \u0026#34;n\u0026#34;; console.log(e); 4; const r = \u0026#34;yass\u0026#34;; r[0] = \u0026#34;n\u0026#34;; console.log(r); 5; let t = { yass: true }; t.yass = false; console.log(t); 6; const t = { yass: true }; t.yass = false; console.log(t); 7; let y = [1]; y[0] = 2; console.log(y); 8; const u = [1]; u[0] = 2; console.log(u); 9; // Curveball let i = { yass: true }; Object.freeze(i); i.yass = false; console.log(i); // Answers: // 1. \u0026#39;nooo\u0026#39; (a let variable can be reassigned a value) // 2. \u0026#39;yass\u0026#39; (a const variable cannot be reassigned a value) // 3. \u0026#39;yass\u0026#39; (a string value is immutable) // 4. \u0026#39;yass\u0026#39; (a string value is immutable) // 5. { yass: false } (This let variable points to an object. An object is mutable) // 6. { yass: false } (This const variable points to an object. An object is mutable) // 7. [2] (This let variable points to an object. An object is mutable) // 8. [2] (This const variable points to an object. An object is mutable) // 9. { yass: true } (Object.freeze prevents an object from being changed) References\nJonas Schmedtmann\u0026rsquo;s The Complete JavaScript Course (highly recommended!) Dan Abramov\u0026rsquo;s JustJavaScript course (highly recommended!) https://www.geeksforgeeks.org/difference-between-var-let-and-const-keywords-in-javascript/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol ","permalink":"https://magdelinehuang.com/posts/002-js-variables-and-value-types/","summary":"The basics aren\u0026rsquo;t very basic","title":"🍰 JavaScript Variables and Value Types"},{"content":"It\u0026rsquo;s about the journey, not the destination 🚗\nDone ✅ Create site (done 27/6/22)\n✅ Write and publish my first post (done 27/6/22)\n✅ Publish to GitHub and deploy to GitHub pages (done 27/6/22)\n✅ Buy a domain and link it to my site (done 12/7/22)\n✅ Add favicon (done 21/7/22)\n✅ Write and publish my first content post (done 21/7/22)\n✅ Integrate Disqus comments (done 23/8/22)\nTo-Do ⚪️ Add RSS feed\n⚪️ Add Google Analytics\n⚪️ Customise the header and footer (remove the background colour for share buttons)\n⚪️ Fix responsive layout (increase margins)\n⚪️ Create an About page\n⚪️ Create a Now page ⚪️ Create a 404 page\n⚪️ Add \u0026ldquo;Last edited on\u0026rdquo;\n⚪️ Customise colour of code blocks\nFuture 🚀 Integrate https://webmention.io/ and https://web.hypothes.is/ ?\n🚀 Build a wiki 🚀 Change stack to Next.js and MDX?\n","permalink":"https://magdelinehuang.com/changelog/","summary":"It\u0026rsquo;s about the journey, not the destination 🚗\nDone ✅ Create site (done 27/6/22)\n✅ Write and publish my first post (done 27/6/22)\n✅ Publish to GitHub and deploy to GitHub pages (done 27/6/22)\n✅ Buy a domain and link it to my site (done 12/7/22)\n✅ Add favicon (done 21/7/22)\n✅ Write and publish my first content post (done 21/7/22)\n✅ Integrate Disqus comments (done 23/8/22)\nTo-Do ⚪️ Add RSS feed","title":"Changelog"}]